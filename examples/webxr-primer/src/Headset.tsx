/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./Headset.glb --transform -t 
Files: ./Headset.glb [3.76KB] > /Users/kaileanokeefe/Desktop/TutorialExports/Headset-transformed.glb [2.18KB] (42%)
*/

import { Outlines, useGLTF } from '@react-three/drei'
import React from 'react'
import * as THREE from 'three'
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader.js'
import { DashedLine } from './DashedLine.js'
import { Gimbal } from './Gimbal.js'
import { HighlightAndSelectableElement, SelectableComponents } from './SelectableComponents.enum'

type GLTFResult = GLTF & {
  nodes: {
    Cube002: THREE.Mesh
    Cube002_1: THREE.Mesh
  }
  materials: {
    ControllerWhite: THREE.MeshStandardMaterial
    ControllerBlack: THREE.MeshStandardMaterial
  }
}

export function Headset(props: HighlightAndSelectableElement) {
  const [isHovered, setIsHovered] = React.useState(false)

  const showOutlines = props.isSelected || isHovered

  const { nodes, materials } = useGLTF('/Headset-transformed.glb') as unknown as GLTFResult
  return (
    <group
      {...props}
      dispose={null}
      onPointerOver={(e) => {
        setIsHovered(true)
        e.stopPropagation()
      }}
      onPointerLeave={(e) => {
        setIsHovered(false)
        e.stopPropagation()
      }}
      onClick={(e) => {
        props.setIsSelected?.(SelectableComponents.headset)
        e.stopPropagation()
      }}
    >
      <group position={[0, 2.417, 0.314]} scale={[0.397, 0.214, 0.302]}>
        <mesh geometry={nodes.Cube002.geometry} material={materials.ControllerWhite}>
          {showOutlines && <Outlines thickness={7} color={'red'} opacity={1} />}
        </mesh>
        <mesh geometry={nodes.Cube002_1.geometry} material={materials.ControllerBlack} />

        {props.isSelected && <Gimbal colorX={'#BC544B'} colorY={'#900603'} colorZ={'#680C07'} length={3} />}
      </group>
      {props.isSelected && <DashedLine start={[0, 2.4, 0.3]} end={[0, 0, 0]} thickness={4} color={'red'} />}
    </group>
  )
}

useGLTF.preload('/Headset-transformed.glb')
