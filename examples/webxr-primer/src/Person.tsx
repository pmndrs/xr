/*
Auto‑generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./Person.glb --transform -t
Files: ./Person.glb [49.44 KB] ➔ Person‑transformed.glb [7.87 KB] (84 %)
*/

import { Outlines, useGLTF } from '@react-three/drei'
import React from 'react'
import * as THREE from 'three'
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader.js'
import { HighlightAndSelectableElement, SelectableComponents } from './SelectableComponents.enum.js'

type GLTFResult = GLTF & {
  nodes: {
    Sphere001: THREE.Mesh
    Sphere001_1: THREE.Mesh
  }
  materials: {
    blueShirt: THREE.MeshStandardMaterial
    Skin: THREE.MeshStandardMaterial
  }
}

export function Person(props: HighlightAndSelectableElement) {
  const [isHovered, setIsHovered] = React.useState(false)
  const showOutlines = props.isSelected || isHovered

  const { nodes, materials } = useGLTF('/Person-transformed.glb') as unknown as GLTFResult

  return (
    <group
      {...props}
      dispose={null}
      onPointerOver={(e) => {
        setIsHovered(true)
        e.stopPropagation()
      }}
      onPointerLeave={(e) => {
        setIsHovered(false)
        e.stopPropagation()
      }}
      onClick={(e) => {
        props.setIsSelected?.(SelectableComponents.person)
        e.stopPropagation()
      }}
    >
      <mesh geometry={nodes.Sphere001.geometry} material={materials.blueShirt}>
        {showOutlines && <Outlines thickness={4} color="rebeccapurple" opacity={1} />}
      </mesh>
      <mesh geometry={nodes.Sphere001_1.geometry} material={materials.Skin}>
        {showOutlines && <Outlines thickness={7} color="rebeccapurple" opacity={1} />}
      </mesh>
    </group>
  )
}

useGLTF.preload('/Person-transformed.glb')
