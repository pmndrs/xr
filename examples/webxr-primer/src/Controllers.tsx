/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./Controllers.glb --transform -t 
Files: ./Controllers.glb [32.27KB] > /Users/kaileanokeefe/Desktop/TutorialExports/Controllers-transformed.glb [5.12KB] (84%)
*/

import { Outlines, useGLTF } from '@react-three/drei'
import React from 'react'
import * as THREE from 'three'
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader.js'
import { DashedLine } from './DashedLine.js'
import { Gimbal } from './Gimbal.js'
import { HighlightAndSelectableElement, SelectableComponents } from './SelectableComponents.enum'

type GLTFResult = GLTF & {
  nodes: {
    Cylinder: THREE.Mesh
    Cylinder_1: THREE.Mesh
  }
  materials: {
    ControllerWhite: THREE.MeshStandardMaterial
    ControllerBlack: THREE.MeshStandardMaterial
  }
}

export function DemoControllers(props: HighlightAndSelectableElement) {
  const [isHovered, setIsHovered] = React.useState(false)

  const showOutlines = props.isSelected || isHovered

  const { nodes, materials } = useGLTF('/Controllers-transformed.glb') as unknown as GLTFResult
  return (
    <group
      {...props}
      dispose={null}
      onPointerOver={(e) => {
        setIsHovered(true)
        e.stopPropagation()
      }}
      onPointerLeave={(e) => {
        setIsHovered(false)
        e.stopPropagation()
      }}
      onClick={(e) => {
        props.setIsSelected?.(SelectableComponents.controllers)
        e.stopPropagation()
      }}
    >
      <mesh geometry={nodes.Cylinder.geometry} material={materials.ControllerWhite}>
        {showOutlines && <Outlines thickness={7} color={'green'} opacity={1} />}
      </mesh>
      <mesh geometry={nodes.Cylinder_1.geometry} material={materials.ControllerBlack}></mesh>
      {props.isSelected && (
        <>
          <Gimbal colorX={'#98fb98'} colorY={'#0b6623'} colorZ={'#023020'} length={0.5} position={[-0.5, 1.5, 1.2]} />
          <Gimbal colorX={'#98fb98'} colorY={'#0b6623'} colorZ={'#023020'} length={0.5} position={[0.5, 1.5, 1.2]} />
          <DashedLine start={[0.5, 1.5, 1.2]} end={[0, 0, 0]} thickness={4} color={'green'} />
          <DashedLine start={[-0.5, 1.5, 1.2]} end={[0, 0, 0]} thickness={4} color={'green'} />
        </>
      )}
    </group>
  )
}

useGLTF.preload('/Controllers-transformed.glb')
