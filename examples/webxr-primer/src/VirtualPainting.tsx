/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 VirtualPainting.glb --transform -t
Files: VirtualPainting.glb [134.29 KB] ➔ VirtualPainting-transformed.glb [15.51 KB] (88 %)
*/

import { Outlines, useGLTF } from '@react-three/drei'
import React from 'react'
import * as THREE from 'three'
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader.js'
import { DashedLine } from './DashedLine.js'
import { Gimbal } from './Gimbal.js'
import { HighlightAndSelectableElement, SelectableComponents } from './SelectableComponents.enum'

type GLTFResult = GLTF & {
  nodes: {
    Cube: THREE.Mesh
  }
  materials: {
    Material: THREE.MeshStandardMaterial
  }
  animations: never[] // ⬅ adjust if you actually use animations
}

const picturePosition = new THREE.Vector3(-2.41, 2, 0)

export function VirtualPainting(props: HighlightAndSelectableElement) {
  const [isHovered, setIsHovered] = React.useState(false)
  const showOutlines = props.isSelected || isHovered

  const { nodes, materials } = useGLTF('/VirtualPainting-transformed.glb') as unknown as GLTFResult

  return (
    <group
      {...props}
      dispose={null}
      position={picturePosition}
      scale={0.5}
      onPointerOver={(e) => {
        setIsHovered(true)
        e.stopPropagation()
      }}
      onPointerLeave={(e) => {
        setIsHovered(false)
        e.stopPropagation()
      }}
      onClick={(e) => {
        props.setIsSelected?.(SelectableComponents.picture)
        e.stopPropagation()
      }}
    >
      <mesh
        geometry={nodes.Cube.geometry}
        material={materials.Material}
        position={[0, 0.983, 0]}
        scale={[0.056, 1, 1.514]}
      >
        {showOutlines && <Outlines thickness={6} color="#dd7346" opacity={1} />}
      </mesh>
      {props.isSelected && (
        <>
          <Gimbal colorX={'#F89880'} colorY={'#FF7900'} colorZ={'#B7410E'} position={[0, 0.8, 0]} />

          <DashedLine start={[0, 0.8, 0.0]} end={[4.8, -4, 0]} thickness={4} color={'#DD7346'} />
        </>
      )}
    </group>
  )
}

useGLTF.preload('/VirtualPainting-transformed.glb')
